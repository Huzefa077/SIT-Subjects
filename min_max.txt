----MIN_MAX START----

#include<vector>
#include<climits>
#include<iostream>
#include<omp.h>
using namespace std;

void reduction_min(vector<int>& arr){
    int min_value = INT_MAX;
    #pragma omp parallel for reduction(min:min_value)
    for(int i = 0; i < arr.size(); i++){
        if(arr[i] < min_value){
            min_value = arr[i];
        }
    }
    cout << "MINIMUM VALUE : " << min_value << endl;
}
void reduction_max(vector<int>& arr){
    int max_value = INT_MIN;
    #pragma omp parallel for reduction(max:max_value)
    for(int i=0 ; i<arr.size() ; i++){
        if(arr[i]>max_value){
            max_value = arr[i];
        }
    }
    cout<<"MAXIMUM VALUE : " <<max_value << endl;
}
void reduction_sum(vector<int>& arr){
    int sum = 0;
    #pragma omp parallel for reduction(+:sum)
    for (int i=0 ; i<arr.size() ; i++){
        sum+=arr[i];
    }
    cout<<"SUM = "<<sum<<endl;
}
void reduction_average(vector<int>& arr){
    int sum = 0;
    #pragma omp parallel for reduction(+:sum)
    for (int i=0 ; i<arr.size() ; i++){
        sum+=arr[i];
    }
    cout<<"AVERAGE = "<<(double)sum / arr.size()<<endl;

}

int main(){
    vector<int> arr = {4,2,6,5,87,12,11,9};
    reduction_min(arr);
    reduction_max(arr);
    reduction_sum(arr);
    reduction_average(arr);
}
---MIN_MAX END---

--MERGE-BUBBLE-START--
// #include <iostream>
// #include <vector>
// #include<climits>
// #include <omp.h>
// using namespace std;

// // Sequential Bubble Sort
// void bubbleSortSequential(vector<int>& arr, int n) {
//     for (int i = 0; i < n - 1; i++) {
//         for (int j = 0; j < n - i - 1; j++) {
//             if (arr[j] > arr[j + 1]) {
//                 swap(arr[j], arr[j + 1]);
//             }
//         }
//     }
// }

// // Parallel Bubble Sort using OpenMP
// void bubbleSortParallel(vector<int>& arr, int n) {
//     for (int i = 0; i < n; i++) {
//         #pragma omp parallel for
//         for (int j = i%2 ; j < n - 1; j += 2) {
//             if (arr[j] > arr[j + 1]) {
//                 swap(arr[j], arr[j + 1]);
//             }
//         }
//     }
// }

// int main() {
//     vector<int> arr1 = {5, 2, 9, 1, 5, 6};  // Original array
//     int n = arr1.size();

//     vector<int> arr2 = arr1; // Copy for parallel sort

//     double start, end;

//     // Sequential timing
//     start = omp_get_wtime();
//     bubbleSortSequential(arr1, n);
//     end = omp_get_wtime();
//     cout << "Sequential Bubble Sort Time: " << end - start << " sec\n";

//     // Parallel timing
//     start = omp_get_wtime();
//     bubbleSortParallel(arr2, n);
//     end = omp_get_wtime();
//     cout << "Parallel Bubble Sort Time: " << end - start << " sec\n";

//     // Output result
//     cout << "Sorted Array (Parallel): ";
//     for (int i = 0; i < n; i++) cout << arr2[i] << " ";
//     cout << endl;

//     return 0;
// }

#include <iostream>
#include <vector>
#include <omp.h>
#include <cstdlib>
using namespace std;

// Merging two sorted halves
void merge(vector<int>& arr, int low, int mid, int high) {
    vector<int> temp;
    int i = low, j = mid + 1;

    // Merge two sorted parts
    while (i <= mid && j <= high) {
        if (arr[i] < arr[j])
            temp.push_back(arr[i++]);
        else
            temp.push_back(arr[j++]);
    }

    // Copy remaining elements
    while (i <= mid) temp.push_back(arr[i++]);
    while (j <= high) temp.push_back(arr[j++]);

    // Copy sorted temp back to original vector
    for (int k = 0; k < temp.size(); k++)
        arr[low + k] = temp[k];
}

// Sequential Merge Sort
void mergeSortSequential(vector<int>& arr, int low, int high) {
    if (low < high) {
        int mid = (low + high) / 2;
        mergeSortSequential(arr, low, mid);
        mergeSortSequential(arr, mid + 1, high);
        merge(arr, low, mid, high);
    }
}

// Parallel Merge Sort using OpenMP
void mergeSortParallel(vector<int>& arr, int low, int high) {
    if (low < high) {
        int mid = (low + high) / 2;

        // Use OpenMP to split work in parallel
        #pragma omp parallel sections
        {
            #pragma omp section
            mergeSortParallel(arr, low, mid);

            #pragma omp section
            mergeSortParallel(arr, mid + 1, high);
        }

        merge(arr, low, mid, high);
    }
}

int main() {
    const int n = 1000;
    vector<int> original;  // Input array

    for (int i = 0; i < n; i++) {
        original.push_back(rand() % 10000);
    }

    // Create two copies: one for sequential, one for parallel
    vector<int> a = original;
    vector<int> b = original;

    double start, end;

    // Sequential merge sort
    start = omp_get_wtime();
    mergeSortSequential(a, 0, a.size() - 1);
    end = omp_get_wtime();
    cout << "\nSequential Merge Sort Time: " << end - start << " sec";

    // Parallel merge sort
    start = omp_get_wtime();
    #pragma omp parallel
    {
        #pragma omp single
        mergeSortParallel(b, 0, b.size() - 1);
    }
    end = omp_get_wtime();
    cout << "\nParallel Merge Sort Time: " << end - start << " sec\n";

    // Print sorted array
    cout << "Sorted Array (Parallel): ";
    for (int val : b)
        cout << val << " ";
    cout << endl;

    return 0;
}
--MERGE-BUBBLE-END--

---DL-FASHION START---
1] import tensorflow as tf 
import matplotlib.pyplot as plt 
from tensorflow import keras 
import numpy as np 

2](x_train, y_train), (x_test, y_test) = keras.datasets.fashion_mnist.load_data() 

3]plt.imshow(x_train[1])

4]plt.imshow(x_train[0])

5]x_train = x_train.astype('float32') / 255.0 
x_test = x_test.astype('float32') / 255.0 
x_train = x_train.reshape(-1, 28, 28, 1) 
x_test = x_test.reshape(-1, 28, 28, 1) 

6]x_train.shape

7]x_test.shape

8]y_train.shape

9]y_test.shape

10]model = keras.Sequential([ 
keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)), 

 
keras.layers.MaxPooling2D((2,2)), 

keras.layers.Dropout(0.25), 

keras.layers.Conv2D(64,  (3,3),  activation='relu'), 


keras.layers.MaxPooling2D((2,2)), 

keras.layers.Dropout(0.25), 
keras.layers.Conv2D(128, (3,3), activation='relu'), 


 
keras.layers.Flatten(), 
keras.layers.Dense(128, activation='relu'), 

 
keras.layers.Dropout(0.25), 
keras.layers.Dense(10, activation='softmax') 

]) 

11]model.summary() 

12]model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
history = model.fit(x_train,y_train,epochs=10,validation_data=(x_test,y_test))

13] test_loss,test_acc = model.evaluate(x_test,y_test)
print('Test accuracy',test_acc)

---DL FASHION END---