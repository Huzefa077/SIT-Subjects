def is_safe(board, row, col):
    # Check if there's a queen in the same row from left side to right side
    #no need to check the presence of queen in the whole vertical column as there is only 1 queen been placed in one column from the start
    for i in range(col):
        if board[row][i] == 1:
            return False

    # Check the upper left diagonal for any queens
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    # Check the lower left diagonal for any queens
    for i, j in zip(range(row, len(board), 1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    # If no queens are found in these directions, it's safe to place a queen here
    return True

def solve_n_queens(board, col):
    # If all columns are filled, we found a solution, so return True
    if col == len(board):
        return True

    # Try placing a queen in each row of the current column
    for i in range(len(board)):
        # Check if it's safe to place a queen at position (i, col)
        if is_safe(board, i, col):
            # Place a queen at (i, col)
            board[i][col] = 1
            # Recursively try to place queens in the remaining columns
            if solve_n_queens(board, col + 1):
                return True
        # Backtrack: Remove the queen if placing it here doesn't lead to a solutio
            board[i][col] = 0

    # If no placement works in this column, return False
    return False

def print_board(board):
    for row in board:
        row_display = []
        for cell in row:
            if cell == 1:
                row_display.append("Q ")
            else:
                row_display.append("- ")
        print(" ".join(row_display))

# def print_board(board):
#     # Print the board in a readable format
#     for row in board:
#         print(" ".join(["Q" if cell == 1 else "-" for cell in row]))

# Initialize the size of the chessboard (8x8 for the standard N-Queens problem)
n = 8
# Create an nxn chessboard with all cells set to 0
chessboard = [[0 for i in range(n)] for i in range(n)]

# Optionally place a queen in the first cell (0, 0) as a starting point
chessboard[0][0] = 1

# Solve the N-Queens problem, starting from the second column
if solve_n_queens(chessboard, 1):
    print("Solution found:")
    print_board(chessboard)  # Print the board with queens in place
else:
    print("No solution exists.")
