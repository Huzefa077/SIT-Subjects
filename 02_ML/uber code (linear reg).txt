import matplotlib.pyplot as plt

# Importing necessary libraries
import pandas as pd
import numpy as np
import matplotlib as plt
import seaborn as sns
# Loading the dataset
df = pd.read_csv("uber.csv")
df.head

df.isnull().sum()

#dropping rows with missing values
df.dropna(inplace = True)
df.isnull().sum()

print(df.columns)

#dropping unwanted columns
df.drop(labels='Unnamed: 0', axis=1, inplace=True)

df.drop(labels='key',axis=1,inplace=True)

#converting datatype of column "pickup_datetime" from object to DateTime
df["pickup_datetime"] = pd.to_datetime(df["pickup_datetime"])

#creating a function to identify outliers
def find_outliers_IQR(df):
 q1 = df.quantile(0.25)
 q3 = df.quantile(0.75)
 IQR = q3-q1
 outliers = df[((df<(q1-1.5*IQR)) | (df>(q3+1.5*IQR)))]
 return outliers
#getting outlier details for column "fair_amount" using the above function
outliers = find_outliers_IQR(df["fare_amount"])
print("number of outliers: "+ str(len(outliers)))
print("max outlier value: "+ str(outliers.max()))
print("min outlier value: "+ str(outliers.min()))
outliers

#upper and lower limit which can be used for capping of outliers
upper_limit = df['fare_amount'].mean() + 3*df['fare_amount'].std()
print(upper_limit)
lower_limit = df['fare_amount'].mean() - 3*df['fare_amount'].std()
print(lower_limit)

#creating a correlation matrix
corrMatrix = df.corr()
sns.heatmap(corrMatrix, annot=True)
plt.show()

# Converting datetime to an ordinal format to keep the full information in one column
df["pickup_datetime_ordinal"] = df["pickup_datetime"].apply(lambda x: x.toordinal())

# Dropping the original "pickup_datetime" column
df.drop("pickup_datetime", axis=1, inplace=True)

# pip install scikit-learn (if not insatlled)
#splitting the data into train and test
from sklearn.model_selection import train_test_split
#independent variables (x)
x=df.drop("fare_amount", axis=1)
x

#dependent variable (y)
y=df["fare_amount"]
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=101)
x_train.head()

x_test.head()

y_train.head()

y_test.head()

print(x_train.shape)
print(x_test.shape)
print(y_test.shape)
print(y_train.shape)

#Linear Regression
from sklearn.linear_model import LinearRegression
lrmodel=LinearRegression()
lrmodel.fit(x_train, y_train)
LinearRegression()
predictedvalues = lrmodel.predict(x_test)
df.head()

#Calculating the value of RMSE for Linear Regression
from sklearn.metrics import mean_squared_error
lrmodelrmse = np.sqrt(mean_squared_error(predictedvalues, y_test))
print("RMSE value for Linear regression is", lrmodelrmse)
# RMSE value for Linear regression is 9.806687708433813